name: Test

on:
  push:
    branches: [main]
  pull_request:
    branches: "*"

jobs:
  test-backend-conda:
    name: Test server with Conda Python ${{ matrix.python-version }} on ${{ matrix.jupyterlab-version }}
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.8", "3.9"]
        # Add JupyterLab 4 to the matrix
        jupyterlab-version: ["3.6.7"]
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Cache conda
        uses: actions/cache@v4
        env:
          # Increase this value to reset cache
          CACHE_NUMBER: 0
        with:
          path: ~/conda_pkgs_dir
          key: ${{ runner.os }}-conda-${{ matrix.python-version }}-${{ env.CACHE_NUMBER }}-${{ hashFiles('pyproject.toml') }}
          restore-keys: |
            ${{ runner.os }}-conda-${{ matrix.python-version }}-${{ env.CACHE_NUMBER }}-${{ hashFiles('pyproject.toml') }}
            ${{ runner.os }}-conda-${{ matrix.python-version }}
      - name: Setup Python ${{ matrix.python-version }}
        uses: conda-incubator/setup-miniconda@v3
        with:
          python-version: ${{ matrix.python-version }}
          activate-environment: test_gator
          channels: conda-forge
          show-channel-urls: true
          use-only-tar-bz2: true

      - name: Install and enable Corepack
        run: |
          npm install -g corepack@0.33.0 --force
          corepack enable

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'yarn'

      - name: Install dependencies
        run: |
          conda info
          conda install -c conda-forge -n test_gator nb_conda_kernels jupyterlab==${{ matrix.jupyterlab-version }}
          jupyter --version
          ./install-lab-version.sh "${{ matrix.jupyterlab-version }}"
        shell: bash -l {0}
      - name: Test the server extension
        run: python -m pytest -ra mamba_gator
        shell: bash -l {0}

  test-backend-mamba:
    name: Test server with Mamba Python ${{ matrix.python-version }} on ${{ matrix.jupyterlab-version }}
    runs-on: ubuntu-latest
    strategy:
      matrix:
        # Skip 3.9 as it is used for integration tests
        python-version: ["3.8"]
        # Add JupyterLab 4 to the matrix
        jupyterlab-version: ["3.6.7"]
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Cache conda
        uses: actions/cache@v4
        env:
          # Increase this value to reset cache
          CACHE_NUMBER: 0
        with:
          path: ~/conda_pkgs_dir
          key: ${{ runner.os }}-mamba-${{ matrix.python-version }}-${{ env.CACHE_NUMBER }}-${{ hashFiles('pyproject.toml') }}
          restore-keys: |
            ${{ runner.os }}-mamba-${{ matrix.python-version }}-${{ env.CACHE_NUMBER }}-${{ hashFiles('pyproject.toml') }}
            ${{ runner.os }}-mamba-${{ matrix.python-version }}
      - name: Setup Python ${{ matrix.python-version }}
        uses: conda-incubator/setup-miniconda@v3
        with:
          miniforge-version: "24.11.3-2"  # For Mamba 1.5.12
          show-channel-urls: true
          use-only-tar-bz2: true

      - name: Install and enable Corepack
        run: |
          npm install -g corepack@0.33.0 --force
          corepack enable

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'yarn'
          
      - name: Install dependencies
        run: |
          mamba create -y -n test_gator -c conda-forge python=${{ matrix.python-version }} nb_conda_kernels
          conda activate test_gator
          pip install jupyterlab==${{ matrix.jupyterlab-version }}
          jupyter --version
          ./install-lab-version.sh "${{ matrix.jupyterlab-version }}"
        shell: bash -l {0}
      - name: Test the server extension
        run: |
          conda activate test_gator
          python -m pytest -ra mamba_gator
        shell: bash -l {0}

  test-all-os:
    name: Test Conda Python 3.8 on ${{ matrix.os }} on ${{ matrix.jupyterlab-version }}
    runs-on: ${{ matrix.os }}
    continue-on-error: true
    timeout-minutes: 60
    strategy:
      fail-fast: false
      matrix:
        os: 
          - "macos-latest"
          - "windows-latest"
        # Add JupyterLab 4 to the matrix
        jupyterlab-version: ["3.6.7"]
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Cache conda
        uses: actions/cache@v4
        env:
          # Increase this value to reset cache
          CACHE_NUMBER: 0
        with:
          path: ~/conda_pkgs_dir
          key: ${{ matrix.os }}-conda-3.8-${{ env.CACHE_NUMBER }}-${{ hashFiles('pyproject.toml') }}
          restore-keys: |
            ${{ matrix.os }}-conda-3.8-${{ env.CACHE_NUMBER }}-${{ hashFiles('pyproject.toml') }}
            ${{ matrix.os }}-conda-3.8

      - name: Setup Python 3.8
        uses: conda-incubator/setup-miniconda@v3
        with:
          activate-environment: test_gator
          channels: conda-forge
          python-version: "3.8"
          show-channel-urls: true
          use-only-tar-bz2: true

      - name: Install and enable Corepack
        run: |
          npm install -g corepack@0.33.0 --force
          corepack enable

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'yarn'
          
      - name: Create conda environment
        run: |
          conda info
          conda install -c conda-forge -n test_gator nb_conda_kernels "jupyterlab==${{ matrix.jupyterlab-version }}"

      - name: Install dependencies and Extension
        run: |
          ./install-lab-version.sh "${{ matrix.jupyterlab-version }}"
        shell: bash -l {0}

      - name: Install Playwright browsers
        if: matrix.os != 'windows-latest'
        run: npx playwright install --with-deps chromium
        shell: bash -l {0}

      - name: Test the extension
        env:
          OS_RUNNER: ${{ matrix.os }}
        run: |
          python -m pytest mamba_gator
          yarn run test
          jupyter serverextension list
          jupyter labextension list
          if [ "${OS_RUNNER}" != "windows-latest" ]; then python -m jupyterlab.browser_check; fi
        shell: bash -l {0}

  test-integration:
    name: All tests on Ubuntu Mamba Python 3.9 on ${{ matrix.jupyterlab-version }}
    runs-on: ubuntu-latest
    strategy:
      matrix:
        # Add JupyterLab 4 to the matrix
        jupyterlab-version: ["3.6.7"]
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Cache conda
        uses: actions/cache@v4
        env:
          # Increase this value to reset cache
          CACHE_NUMBER: 0
        with:
          path: ~/conda_pkgs_dir
          key: ${{ runner.os }}-mamba-3.9-${{ env.CACHE_NUMBER }}-${{ hashFiles('pyproject.toml') }}
          restore-keys: |
            ${{ runner.os }}-mamba-3.9-${{ env.CACHE_NUMBER }}-${{ hashFiles('pyproject.toml') }}
            ${{ runner.os }}-mamba-3.9

      - name: Setup Python 3.9
        uses: conda-incubator/setup-miniconda@v3
        with:
          miniforge-version: "24.11.3-2"  # For Mamba 1.5.12
          show-channel-urls: true
          use-only-tar-bz2: true

      - name: Install and enable Corepack
        run: |
          npm install -g corepack@0.33.0 --force
          corepack enable

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'yarn'
 
      - name: Create mamba environment
        shell: bash -l {0}
        run: |
          mamba create -y -n test_gator -c conda-forge python=3.9 nb_conda_kernels
          conda activate test_gator
          pip install jupyterlab==${{ matrix.jupyterlab-version }}
          python --version
          jupyter --version

      - name: Install Dependencies and Extension
        run: |
          conda activate test_gator
          ./install-lab-version.sh "${{ matrix.jupyterlab-version }}"

          # Check pip dependencies
          pip check
        shell: bash -l {0}

      - name: Install Playwright browsers
        run: npx playwright install --with-deps chromium
        shell: bash -l {0}

      - name: Test the extension
        run: |
          conda activate test_gator
          # Run linter
          hatch run lint:check
          yarn run eslint:check

          # Run test
          coverage run -m pytest mamba_gator
          coverage report
          yarn run test

          jupyter serverextension list
          jupyter serverextension list 2>&1 | grep "mamba_gator.*OK"

          jupyter server extension list
          jupyter server extension list 2>&1 | grep "mamba_gator.*OK"
          jupyter labextension list
          jupyter labextension list 2>&1 | grep "@mamba-org/gator-lab.*OK"
          python -m jupyterlab.browser_check
        shell: bash -l {0}
